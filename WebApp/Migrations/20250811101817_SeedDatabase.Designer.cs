// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(WebAppContext))]
    [Migration("20250811101817_SeedDatabase")]
    partial class SeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobDescriptionJobProvider", b =>
                {
                    b.Property<int>("DescriptionsId")
                        .HasColumnType("int");

                    b.Property<int>("ProvidersId")
                        .HasColumnType("int");

                    b.HasKey("DescriptionsId", "ProvidersId");

                    b.HasIndex("ProvidersId");

                    b.ToTable("JobDescriptionJobProvider");
                });

            modelBuilder.Entity("WebApp.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationProviderId")
                        .HasColumnType("int");

                    b.Property<bool>("Applied")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Expires")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Found")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("JobProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Posted")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobProviderId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("WebApp.Models.JobDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("GlobalKeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Locations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobDescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GlobalKeyWords = "[\"junior\",\"entry\",\"grad\"]",
                            Name = "Software Engineer"
                        });
                });

            modelBuilder.Entity("WebApp.Models.JobProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Class_JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_JobLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_NextPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CloudflareBlocked")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastScraped")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobProvider");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class_JobDescription = "div.job-card__text > p",
                            Class_JobLink = "a.job-card__link",
                            Class_JobLocation = "div.job-card__location",
                            Class_JobTitle = "div.job-card > h3",
                            CloudflareBlocked = false,
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "BAE Systems",
                            Url = "https://jobsearch.baesystems.com/search-and-apply"
                        },
                        new
                        {
                            Id = 2,
                            Class_JobDescription = "div.job-card__text > p",
                            Class_JobLink = "a.job-card__link",
                            Class_JobLocation = "div.job-card__location",
                            Class_JobTitle = "div.job-card > h3",
                            CloudflareBlocked = false,
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Revolut",
                            Url = "https://www.revolut.com/careers/"
                        },
                        new
                        {
                            Id = 3,
                            Class_JobLink = "div.jobs-title > b > a",
                            Class_JobLocation = "div.jobs-location > small",
                            Class_JobTitle = "a.jobs-title > b",
                            Class_NextPage = "div.pager__item--next",
                            CloudflareBlocked = false,
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nestle",
                            Url = "https://www.nestle.com/jobs/search-jobs"
                        });
                });

            modelBuilder.Entity("JobDescriptionJobProvider", b =>
                {
                    b.HasOne("WebApp.Models.JobDescription", null)
                        .WithMany()
                        .HasForeignKey("DescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.JobProvider", null)
                        .WithMany()
                        .HasForeignKey("ProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Job", b =>
                {
                    b.HasOne("WebApp.Models.JobProvider", null)
                        .WithMany("Jobs")
                        .HasForeignKey("JobProviderId");
                });

            modelBuilder.Entity("WebApp.Models.JobProvider", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
