// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(WebAppContext))]
    [Migration("20250809112138_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobDescriptionJobProvider", b =>
                {
                    b.Property<int>("DescriptionsId")
                        .HasColumnType("int");

                    b.Property<int>("ProvidersId")
                        .HasColumnType("int");

                    b.HasKey("DescriptionsId", "ProvidersId");

                    b.HasIndex("ProvidersId");

                    b.ToTable("JobDescriptionJobProvider");
                });

            modelBuilder.Entity("WebApp.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationProviderId")
                        .HasColumnType("int");

                    b.Property<bool>("Applied")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Expires")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Found")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("JobProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Posted")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobProviderId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("WebApp.Models.JobDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("GlobalKeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Locations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobDescription");
                });

            modelBuilder.Entity("WebApp.Models.JobProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Class_JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_JobLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_NextPage")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastScraped")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobProvider");
                });

            modelBuilder.Entity("JobDescriptionJobProvider", b =>
                {
                    b.HasOne("WebApp.Models.JobDescription", null)
                        .WithMany()
                        .HasForeignKey("DescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.JobProvider", null)
                        .WithMany()
                        .HasForeignKey("ProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Job", b =>
                {
                    b.HasOne("WebApp.Models.JobProvider", null)
                        .WithMany("Jobs")
                        .HasForeignKey("JobProviderId");
                });

            modelBuilder.Entity("WebApp.Models.JobProvider", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
