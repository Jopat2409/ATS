// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(WebAppContext))]
    [Migration("20250814210330_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobJobSource", b =>
                {
                    b.Property<int>("DescriptionsId")
                        .HasColumnType("int");

                    b.Property<int>("SourcesId")
                        .HasColumnType("int");

                    b.HasKey("DescriptionsId", "SourcesId");

                    b.HasIndex("SourcesId");

                    b.ToTable("JobJobSource");
                });

            modelBuilder.Entity("WebApp.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("KeyWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Locations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("WebApp.Models.JobListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Applied")
                        .HasColumnType("bit")
                        .HasComment("Whether the system has a logged application for this listing");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The job description");

                    b.Property<DateTimeOffset?>("Expires")
                        .HasColumnType("datetimeoffset")
                        .HasComment("What time the job listing expires");

                    b.Property<DateTimeOffset>("Found")
                        .HasColumnType("datetimeoffset")
                        .HasComment("What time the job was scraped");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The location of the job");

                    b.Property<DateTimeOffset?>("Posted")
                        .HasColumnType("datetimeoffset")
                        .HasComment("What time the job was posted");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has viewed this application");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The full name of the job description");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The URL to the job description");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Listing");
                });

            modelBuilder.Entity("WebApp.Models.JobSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CloudflareBlocked")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("KeyWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastScraped")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Selector_JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Selector_JobLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Selector_JobListings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Selector_JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Selector_JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Selector_NextPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Source");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "BAE Systems",
                            Selector_JobDescription = "div.job-card__text > p",
                            Selector_JobLink = "a.job-card__link",
                            Selector_JobLocation = "div.job-card__location",
                            Selector_JobTitle = "div.job-card > h3",
                            SourceType = 0,
                            Url = "https://jobsearch.baesystems.com/search-and-apply?_search="
                        },
                        new
                        {
                            Id = 2,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Revolut",
                            Selector_JobDescription = "div.job-card__text > p",
                            Selector_JobLink = "a.job-card__link",
                            Selector_JobLocation = "div.job-card__location",
                            Selector_JobTitle = "div.job-card > h3",
                            SourceType = 0,
                            Url = "https://www.revolut.com/careers/?text="
                        },
                        new
                        {
                            Id = 3,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nestle UK",
                            Selector_JobLink = "div.jobs-title > b > a",
                            Selector_JobLocation = "div.jobs-location > small",
                            Selector_JobTitle = "a.jobs-title > b",
                            Selector_NextPage = "div.pager__item--next",
                            SourceType = 0,
                            Url = "https://www.nestle.com/jobs/search-jobs?keyword="
                        },
                        new
                        {
                            Id = 4,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ARM",
                            Selector_JobLink = "a.job-card__title",
                            Selector_JobLocation = "span.location",
                            Selector_JobTitle = "a.job-card__title",
                            SourceType = 0,
                            Url = "https://careers.arm.com/search-jobs/"
                        },
                        new
                        {
                            Id = 5,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Dassault Systemes UK",
                            Selector_JobLocation = "div.job-card-place > div",
                            Selector_JobTitle = "div.job-card-title",
                            SourceType = 0,
                            Url = "https://www.3ds.com/careers/jobs?wockw="
                        },
                        new
                        {
                            Id = 6,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Deliveroo",
                            Selector_JobLink = "a.post",
                            Selector_JobLocation = "span.text-body.text-black-teal",
                            Selector_JobTitle = "h4.text-body-lg.text-body-strong",
                            SourceType = 0,
                            Url = "https://careers.deliveroo.co.uk/join-the-team/?search="
                        },
                        new
                        {
                            Id = 7,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "IBM",
                            Selector_JobLink = "a.bx--card-group__card",
                            Selector_JobTitle = "div.bx--card__heading",
                            SourceType = 0,
                            Url = "https://www.ibm.com/uk-en/careers/search?q="
                        },
                        new
                        {
                            Id = 8,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sage UK",
                            Selector_JobDescription = "div.function",
                            Selector_JobLink = "div.job-link",
                            Selector_JobLocation = "div.office-location",
                            Selector_JobTitle = "div.job-title",
                            SourceType = 0,
                            Url = "https://www.sage.com/en-gb/company/careers/career-search/?keywords=soft"
                        },
                        new
                        {
                            Id = 9,
                            CloudflareBlocked = false,
                            KeyWords = "[]",
                            LastScraped = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sage API",
                            Selector_JobDescription = "Description",
                            Selector_JobLink = "Url",
                            Selector_JobListings = "vacancies.Records",
                            Selector_JobLocation = "OfficeLocation",
                            Selector_JobTitle = "Name",
                            SourceType = 0,
                            Url = "https://www.sage.com/api/sagedotcom/careersearch/getcareersearchdata/"
                        });
                });

            modelBuilder.Entity("JobJobSource", b =>
                {
                    b.HasOne("WebApp.Models.Job", null)
                        .WithMany()
                        .HasForeignKey("DescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.JobSource", null)
                        .WithMany()
                        .HasForeignKey("SourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.JobListing", b =>
                {
                    b.HasOne("WebApp.Models.JobSource", "Source")
                        .WithMany("Listings")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("WebApp.Models.JobSource", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
