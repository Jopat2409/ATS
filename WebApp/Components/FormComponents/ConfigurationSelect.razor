@typeparam Item
@implements IDisposable

@inject WebApp.Services.DropdownService DropdownHandler

<flex class="flex @ClassName inline-block relative">
    <button class="flex w-full items-center justify-between rounded border border-gray-400 bg-gray-100 hover:bg-gray-200" >
        <span class="px-4 h-full py-1">@Placeholder</span>
        <span class="flex items-center gap-1 px-3 border-l border-gray-400 bg-gray-200 hover:bg-gray-100 h-full py-1" @onclick="() => DropdownHandler.Toggle(_id)">
            <i class="fa fa-gear"></i>
            <i class="fa fa-caret-down transform transition-transform duration-300 ease-in-out"></i>
        </span>
    </button>

    @if(IsOpen)
    {
        <div class="absolute left-0 w-full top-full z-40 bg-gray-100 rounded-md mt-2 border flex flex-col">
            <div class="border border-gray-400 border-b-0 py-2 rounded-t-md px-2"><i class="fa fa-plus-square-o mr-2" />Add existing providers</div>
            <div class="border border-gray-400 border-b-0 p-2">Add providers from other description</div>
            <div class="border border-gray-400 p-2 rounded-b-md">Add custom provider</div>
        </div>
    }

</flex>

@code
{
    [Parameter]
    public List<Item> items { get; set; } = new();

    [Parameter]
    public string ClassName { get; set; } = "";

    [Parameter]
    public string Placeholder { get; set; } = "Configure Default Providers";

    private string _id = "";
    private bool IsOpen => DropdownHandler.OpenId == _id;

    protected override void OnInitialized()
    {
        _id = Guid.NewGuid().ToString();
        DropdownHandler.StateChanged += OnStateChanged;
    }


    private void OnStateChanged() => InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        DropdownHandler.StateChanged -= OnStateChanged;
    }

}