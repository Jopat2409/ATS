@using WebApp.Models;

@inject IJSRuntime JS
@inject WebApp.Services.Repositories.JobRepository JobDescriptionRepo
@inject WebApp.Services.Repositories.JobSourceRepository JobProviderRepo


<EditForm method="post" Model="CreatedJobDescription" OnValidSubmit="AddJobDescription" FormName="create" Enhance class="p-10">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="mb-3">
        <label for="name" class="form-label">Job Title:</label>
        <InputText id="name" @bind-Value="CreatedJobDescription.Name" class="form-control" />
        <ValidationMessage For="() => CreatedJobDescription.Name" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="default-providers" class="form-label">
            Default Providers:
        </label>
        <p>Selected: @string.Join(", ", SelectedProviders)</p>
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnDescriptionAdded { get; set; }

    public Job CreatedJobDescription { get; set; } = Job.Empty;

    public List<JobSource> ConfiguredProviders { get; set; } = new();
    public HashSet<int> SelectedProviders { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ConfiguredProviders = await JobProviderRepo.ReadAllAsync();
    }


    private async Task AddJobDescription()
    {
        await JobDescriptionRepo.CreateAsync(CreatedJobDescription);
        await OnDescriptionAdded.InvokeAsync();
    }
}
