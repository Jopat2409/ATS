@using WebApp.Components.FormComponents
@using WebApp.Models

@inject WebApp.Services.Repositories.JobRepository JobRepository
@inject ILogger<JobEditForm> Logger


<ConfigurationForm 
    Title=@($"Edit {EditingJob.Name}") 
    Modified=@IsModified
>
    <EditForm Model="@EditingJob" OnValidSubmit="@UpdateJob" class="flex flex-col gap-2 rounded-md">

        <FormTextInput 
            Label="Name" 
            Placeholder="Job Description"
            OnInput="OnNameChange" 
            Value="@EditingJob.Name"
        />

        <FormTextInput 
            Label="Key Words" 
            Placeholder="Key Words (separated by ,)" 
            OnInput="OnKeyWordsChanged" 
            Value="@string.Join(", ", EditingJob.KeyWords)" 
        />

        <FormTextInput Label="Desired Locations"
            Placeholder="Cities (separated by ,)"
            OnInput="OnLocationsChanged"
            Value="@string.Join(", ", EditingJob.Locations)" 
        />

        <div class="text-xl font-regular">Configured Providers</div>
        <table class=@($"table-fixed{(EditingJob.Sources.Count > 5 ? " h-[100px] overflow-y-scroll" : "")}")>
            <tbody>
                @foreach (var provider in EditingJob.Sources)
                {
                    <tr class="border">
                        <td class="flex flex-row items-center">
                            <button>
                                <i class="fa fa-gear px-2"/>
                            </button>
                            <div>@provider.Name</div>
                            <button class="ml-auto" type="button" @onclick="() => OnRemoveExistingProvider(provider.Id)"><i class="fa fa-trash px-2" /></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="flex flex-row gap-2">
            <ConfigurationSelect 
                SourceOwner="EditingJob" 
                ClassName="flex-grow"
                Placeholder="Configure Providers"
                OnProvidersUpdated="OnJobUpdate"
            />
            <button class="rounded-md bg-[#F4F4F4] border border-1 px-5" type="submit">
                Save
            </button>
        </div>

    </EditForm>

</ConfigurationForm>



@code
{
    [Parameter]
    public required Job EditingJob { get; set; }

    [Parameter]
    public EventCallback OnJobUpdate { get; set; }

    [Parameter]
    public EventCallback OnJobEdit { get; set; }

    protected async Task OnAddExistingProvider(int provider)
    {
        await JobRepository.AddExistingSourceAsync(EditingJob!.Id, provider);
        await OnJobUpdate.InvokeAsync();
    }

    protected async Task OnRemoveExistingProvider(int provider)
    {
        await JobRepository.RemoveExistingSourceAsync(EditingJob!.Id, provider);
        await OnJobUpdate.InvokeAsync();
    }

    protected bool IsModified { get; set; } = false;

    public void OnNameChange(string name)
    {
        Logger.LogInformation("Changing name from \"{}\" to \"{}\"", EditingJob.Name, name);
        EditingJob.Name = name;
        IsModified = true;

        OnJobEdit.InvokeAsync();
    }

    public void OnKeyWordsChanged(string keywords)
    {
        EditingJob.KeyWords = keywords.Split(",").Select(kw => kw.Trim()).ToList();
        IsModified = true;

        OnJobEdit.InvokeAsync();
    }

    public void OnLocationsChanged(string locations)
    {
        EditingJob.Locations = locations.Split(",").Select(j => j.Trim()).ToList();
        IsModified = true;

        OnJobEdit.InvokeAsync();
    }

    public async Task UpdateJob()
    {
        await JobRepository.UpdateDetailsAsync(EditingJob);
        await OnJobUpdate.InvokeAsync();

        IsModified = false;
    }
}